import sqlite3
import pandas as pd
import os
import subprocess
import shutil
from pydub import AudioSegment
import sys


bms_db_list = [
    # 使用している beatoraja の songdata.db の path をここに配置
    # locate the paths of songdata.db in beatoraja which you play with
    # "~/beatoraja/songdata.db", .......
]

jar_file = "para_out.jar" # locate the path of jar file generated by this sbt project

def search_bms(song_name):
    song_df_list = []
    for dbname in bms_db_list:
        conn = sqlite3.connect(dbname)
        song_df = pd.read_sql(f"SELECT title, artist, path FROM song where title like '%{song_name}%'", conn)
        song_df_list.append(song_df)
        conn.close()
    all_df = pd.concat(song_df_list).drop_duplicates()
    all_df.index = range(len(all_df))
    return all_df

def ogg_to_wav(work_dir):
    file_list = os.listdir(work_dir)
    ogg_file_list = list(filter(lambda x: x.endswith(".ogg"), file_list))
    for input_ogg_file in ogg_file_list:
        input_file = f"{work_dir}/{input_ogg_file}"
        output_file = f"{work_dir}/{input_ogg_file.replace('.ogg', '.wav')}"
        audio = AudioSegment.from_file(input_file, format="ogg")
        audio.export(output_file, format="wav")

def delete_wav(work_dir):
    file_list = os.listdir(work_dir)
    wav_file_list = list(filter(lambda x: x.endswith(".wav"), file_list))
    for input_wav_file in wav_file_list:
        os.remove(os.path.join(work_dir, input_wav_file))

# BMS ファイルとして使われていないであろうファイル拡張子を可能な限り弾く
non_bms_file_ext = ["ogg", "wav", "bmp", "png", "jpg", "mp3", "mp4", "wmv", "avi", "wmv", "mpg", "mpeg"]
def maybe_bms_file(filename):
    for ext in non_bms_file_ext:
        if (filename.endswith(f".{ext}")):
            return False
    return True

def get_para_out_bms_file(bms_dir):
    file_list = os.listdir(bms_dir)
    bms_file_list = list(filter(maybe_bms_file, file_list))
    print("input target bms file to para out")
    for i in range(len(bms_file_list)):
        print(f"[{i}]: {bms_file_list[i]}")
    para_out_bms = bms_file_list[int(input())]
    return para_out_bms

# get para out from BMS song name
if __name__ == '__main__':
    args = sys.argv
    # 曲名の入力
    song_name = args[1]
    # database から曲の候補を検索し、一覧を表示。目的のBMSを入力
    song_df = search_bms(song_name)
    print("input target bms (used to determine BMS path)")
    for index,row in song_df.iterrows():
        print(f"[{index}]: {row['title']} - {row['artist']} | {row['path']}")
    target_bms = song_df.loc[int(input())]
    # 該当BMSディレクトリから、全BMSファイルを表示。今回対象とするBMSを入力
    path = target_bms["path"]
    print(f"original target BMS path: {path}")
    bms_dir = os.path.dirname(path)
    para_out_bms = get_para_out_bms_file(bms_dir)
    # 該当BMSのディレクトリを作業用ディレクトリ以下にコピー
    print("copying the directory of target BMS to here......")
    work_dir = os.path.basename(bms_dir)
    if (not os.path.isdir(work_dir)):
        shutil.copytree(bms_dir, work_dir)
    # ogg の wav化
    print("converting ogg file to wav......")
    ogg_to_wav(work_dir)
    # パラアウト
    subprocess.run(['java', '-jar', jar_file, '-i', f"{work_dir}/{para_out_bms}", '-d'])
    # BMS レーン用
    subprocess.run(['java', '-jar', jar_file, '-i', f"{work_dir}/{para_out_bms}", '-r', '200-', '-n', '-p', 'notes'])
